var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const fetch = require("node-fetch");
const { ApolloClient } = require("apollo-client");
const { HttpLink } = require("apollo-link-http");
const { setContext } = require('apollo-link-context');
const { WebSocketLink } = require("apollo-link-ws");
const {
  InMemoryCache,
  IntrospectionFragmentMatcher
} = require("apollo-cache-inmemory");
const introspectionQueryResultData = require("./fragmentTypes.json");

// Refer to https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher
// on how to obtain the fragmentTypes data 
const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData
});
const cache = new InMemoryCache({ fragmentMatcher });

const authLink = token => setContext((_, { headers }) => {
  return {
    headers: _extends({}, headers, {
      authorization: token ? `Bearer ${token}` : ""
    })
  };
});

module.exports = {
  client: (uri, token) => {
    const client = new ApolloClient({
      link: authLink(token).concat(new HttpLink({ uri, fetch })),
      cache
    });
    return {
      instances: require("./instances")(client),
      apps: require("./apps")(client),
      buckets: require("./buckets")(client),
      datastores: require("./datastores")(client),
      resources: require("./resources")(client),
      appstoreapps: require("./appstoreapps")(client),
      currentUser: require("./current-user")(client)
    };
  },
  subscriptions: (uri, token, options = { reconnect: true }, webSocketImpl) => {
    options.connectionParams = { token };
    const wsclient = new ApolloClient({
      link: new WebSocketLink({ uri, options, webSocketImpl }),
      cache
    });
    return {
      instances: require("./subscriptions/instances")(wsclient),
      apps: require("./subscriptions/apps")(wsclient),
      buckets: require("./subscriptions/buckets")(wsclient),
      resources: require("./subscriptions/resources")(wsclient)
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJBcG9sbG9DbGllbnQiLCJIdHRwTGluayIsInNldENvbnRleHQiLCJXZWJTb2NrZXRMaW5rIiwiSW5NZW1vcnlDYWNoZSIsIkludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXIiLCJpbnRyb3NwZWN0aW9uUXVlcnlSZXN1bHREYXRhIiwiZnJhZ21lbnRNYXRjaGVyIiwiY2FjaGUiLCJhdXRoTGluayIsInRva2VuIiwiXyIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsaWVudCIsInVyaSIsImxpbmsiLCJjb25jYXQiLCJpbnN0YW5jZXMiLCJhcHBzIiwiYnVja2V0cyIsImRhdGFzdG9yZXMiLCJyZXNvdXJjZXMiLCJhcHBzdG9yZWFwcHMiLCJjdXJyZW50VXNlciIsInN1YnNjcmlwdGlvbnMiLCJvcHRpb25zIiwicmVjb25uZWN0Iiwid2ViU29ja2V0SW1wbCIsImNvbm5lY3Rpb25QYXJhbXMiLCJ3c2NsaWVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxRQUFRQyxRQUFRLFlBQVIsQ0FBZDtBQUNBLE1BQU0sRUFBRUMsWUFBRixLQUFtQkQsUUFBUSxlQUFSLENBQXpCO0FBQ0EsTUFBTSxFQUFFRSxRQUFGLEtBQWVGLFFBQVEsa0JBQVIsQ0FBckI7QUFDQSxNQUFNLEVBQUVHLFVBQUYsS0FBaUJILFFBQVEscUJBQVIsQ0FBdkI7QUFDQSxNQUFNLEVBQUVJLGFBQUYsS0FBb0JKLFFBQVEsZ0JBQVIsQ0FBMUI7QUFDQSxNQUFNO0FBQ0pLLGVBREk7QUFFSkM7QUFGSSxJQUdGTixRQUFRLHVCQUFSLENBSEo7QUFJQSxNQUFNTywrQkFBK0JQLFFBQVEsc0JBQVIsQ0FBckM7O0FBRUE7QUFDQTtBQUNBLE1BQU1RLGtCQUFrQixJQUFJRiw0QkFBSixDQUFpQztBQUN2REM7QUFEdUQsQ0FBakMsQ0FBeEI7QUFHQSxNQUFNRSxRQUFRLElBQUlKLGFBQUosQ0FBa0IsRUFBRUcsZUFBRixFQUFsQixDQUFkOztBQUVBLE1BQU1FLFdBQVdDLFNBQVNSLFdBQVcsQ0FBQ1MsQ0FBRCxFQUFJLEVBQUVDLE9BQUYsRUFBSixLQUFvQjtBQUN2RCxTQUFPO0FBQ0xBLDBCQUNLQSxPQURMO0FBRUVDLHFCQUFlSCxRQUFTLFVBQVNBLEtBQU0sRUFBeEIsR0FBNEI7QUFGN0M7QUFESyxHQUFQO0FBTUQsQ0FQeUIsQ0FBMUI7O0FBU0FJLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsVUFBUSxDQUFDQyxHQUFELEVBQU1QLEtBQU4sS0FBZ0I7QUFDdEIsVUFBTU0sU0FBUyxJQUFJaEIsWUFBSixDQUFpQjtBQUM5QmtCLFlBQU1ULFNBQVNDLEtBQVQsRUFBZ0JTLE1BQWhCLENBQXVCLElBQUlsQixRQUFKLENBQWEsRUFBRWdCLEdBQUYsRUFBT25CLEtBQVAsRUFBYixDQUF2QixDQUR3QjtBQUU5QlU7QUFGOEIsS0FBakIsQ0FBZjtBQUlBLFdBQU87QUFDTFksaUJBQVdyQixRQUFRLGFBQVIsRUFBdUJpQixNQUF2QixDQUROO0FBRUxLLFlBQU10QixRQUFRLFFBQVIsRUFBa0JpQixNQUFsQixDQUZEO0FBR0xNLGVBQVN2QixRQUFRLFdBQVIsRUFBcUJpQixNQUFyQixDQUhKO0FBSUxPLGtCQUFZeEIsUUFBUSxjQUFSLEVBQXdCaUIsTUFBeEIsQ0FKUDtBQUtMUSxpQkFBV3pCLFFBQVEsYUFBUixFQUF1QmlCLE1BQXZCLENBTE47QUFNTFMsb0JBQWMxQixRQUFRLGdCQUFSLEVBQTBCaUIsTUFBMUIsQ0FOVDtBQU9MVSxtQkFBYTNCLFFBQVEsZ0JBQVIsRUFBMEJpQixNQUExQjtBQVBSLEtBQVA7QUFTRCxHQWZjO0FBZ0JmVyxpQkFBZSxDQUFDVixHQUFELEVBQU1QLEtBQU4sRUFBYWtCLFVBQVUsRUFBRUMsV0FBVyxJQUFiLEVBQXZCLEVBQTRDQyxhQUE1QyxLQUE4RDtBQUMzRUYsWUFBUUcsZ0JBQVIsR0FBMkIsRUFBRXJCLEtBQUYsRUFBM0I7QUFDQSxVQUFNc0IsV0FBVyxJQUFJaEMsWUFBSixDQUFpQjtBQUNoQ2tCLFlBQU0sSUFBSWYsYUFBSixDQUFrQixFQUFFYyxHQUFGLEVBQU9XLE9BQVAsRUFBZ0JFLGFBQWhCLEVBQWxCLENBRDBCO0FBRWhDdEI7QUFGZ0MsS0FBakIsQ0FBakI7QUFJQSxXQUFPO0FBQ0xZLGlCQUFXckIsUUFBUSwyQkFBUixFQUFxQ2lDLFFBQXJDLENBRE47QUFFTFgsWUFBTXRCLFFBQVEsc0JBQVIsRUFBZ0NpQyxRQUFoQyxDQUZEO0FBR0xWLGVBQVN2QixRQUFRLHlCQUFSLEVBQW1DaUMsUUFBbkMsQ0FISjtBQUlMUixpQkFBV3pCLFFBQVEsMkJBQVIsRUFBcUNpQyxRQUFyQztBQUpOLEtBQVA7QUFNRDtBQTVCYyxDQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG5jb25zdCB7IEFwb2xsb0NsaWVudCB9ID0gcmVxdWlyZShcImFwb2xsby1jbGllbnRcIik7XG5jb25zdCB7IEh0dHBMaW5rIH0gPSByZXF1aXJlKFwiYXBvbGxvLWxpbmstaHR0cFwiKTtcbmNvbnN0IHsgc2V0Q29udGV4dCB9ID0gcmVxdWlyZSgnYXBvbGxvLWxpbmstY29udGV4dCcpO1xuY29uc3QgeyBXZWJTb2NrZXRMaW5rIH0gPSByZXF1aXJlKFwiYXBvbGxvLWxpbmstd3NcIik7XG5jb25zdCB7XG4gIEluTWVtb3J5Q2FjaGUsXG4gIEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXJcbn0gPSByZXF1aXJlKFwiYXBvbGxvLWNhY2hlLWlubWVtb3J5XCIpO1xuY29uc3QgaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSA9IHJlcXVpcmUoXCIuL2ZyYWdtZW50VHlwZXMuanNvblwiKTtcblxuLy8gUmVmZXIgdG8gaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hZHZhbmNlZC9mcmFnbWVudHMuaHRtbCNmcmFnbWVudC1tYXRjaGVyXG4vLyBvbiBob3cgdG8gb2J0YWluIHRoZSBmcmFnbWVudFR5cGVzIGRhdGEgXG5jb25zdCBmcmFnbWVudE1hdGNoZXIgPSBuZXcgSW50cm9zcGVjdGlvbkZyYWdtZW50TWF0Y2hlcih7XG4gIGludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGFcbn0pO1xuY29uc3QgY2FjaGUgPSBuZXcgSW5NZW1vcnlDYWNoZSh7IGZyYWdtZW50TWF0Y2hlciB9KTtcblxuY29uc3QgYXV0aExpbmsgPSB0b2tlbiA9PiBzZXRDb250ZXh0KChfLCB7IGhlYWRlcnMgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIC4uLmhlYWRlcnMsXG4gICAgICBhdXRob3JpemF0aW9uOiB0b2tlbiA/IGBCZWFyZXIgJHt0b2tlbn1gIDogXCJcIlxuICAgIH1cbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xpZW50OiAodXJpLCB0b2tlbikgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoe1xuICAgICAgbGluazogYXV0aExpbmsodG9rZW4pLmNvbmNhdChuZXcgSHR0cExpbmsoeyB1cmksIGZldGNoIH0pKSxcbiAgICAgIGNhY2hlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlczogcmVxdWlyZShcIi4vaW5zdGFuY2VzXCIpKGNsaWVudCksXG4gICAgICBhcHBzOiByZXF1aXJlKFwiLi9hcHBzXCIpKGNsaWVudCksXG4gICAgICBidWNrZXRzOiByZXF1aXJlKFwiLi9idWNrZXRzXCIpKGNsaWVudCksXG4gICAgICBkYXRhc3RvcmVzOiByZXF1aXJlKFwiLi9kYXRhc3RvcmVzXCIpKGNsaWVudCksXG4gICAgICByZXNvdXJjZXM6IHJlcXVpcmUoXCIuL3Jlc291cmNlc1wiKShjbGllbnQpLFxuICAgICAgYXBwc3RvcmVhcHBzOiByZXF1aXJlKFwiLi9hcHBzdG9yZWFwcHNcIikoY2xpZW50KSxcbiAgICAgIGN1cnJlbnRVc2VyOiByZXF1aXJlKFwiLi9jdXJyZW50LXVzZXJcIikoY2xpZW50KVxuICAgIH07XG4gIH0sXG4gIHN1YnNjcmlwdGlvbnM6ICh1cmksIHRva2VuLCBvcHRpb25zID0geyByZWNvbm5lY3Q6IHRydWUgfSwgd2ViU29ja2V0SW1wbCkgPT4ge1xuICAgIG9wdGlvbnMuY29ubmVjdGlvblBhcmFtcyA9IHsgdG9rZW4gfVxuICAgIGNvbnN0IHdzY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgICBsaW5rOiBuZXcgV2ViU29ja2V0TGluayh7IHVyaSwgb3B0aW9ucywgd2ViU29ja2V0SW1wbCB9KSxcbiAgICAgIGNhY2hlLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbnN0YW5jZXM6IHJlcXVpcmUoXCIuL3N1YnNjcmlwdGlvbnMvaW5zdGFuY2VzXCIpKHdzY2xpZW50KSxcbiAgICAgIGFwcHM6IHJlcXVpcmUoXCIuL3N1YnNjcmlwdGlvbnMvYXBwc1wiKSh3c2NsaWVudCksXG4gICAgICBidWNrZXRzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2J1Y2tldHNcIikod3NjbGllbnQpLFxuICAgICAgcmVzb3VyY2VzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL3Jlc291cmNlc1wiKSh3c2NsaWVudClcbiAgICB9O1xuICB9XG59O1xuIl19