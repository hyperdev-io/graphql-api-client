var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const fetch = require("node-fetch");
const { ApolloClient } = require("apollo-client");
const { HttpLink } = require("apollo-link-http");
const { setContext } = require('apollo-link-context');
const { WebSocketLink } = require("apollo-link-ws");
const { onError } = require("apollo-link-error");
const {
  InMemoryCache,
  IntrospectionFragmentMatcher
} = require("apollo-cache-inmemory");
const introspectionQueryResultData = require("./fragmentTypes.json");

// Refer to https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher
// on how to obtain the fragmentTypes data 
const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData
});
const cache = new InMemoryCache({ fragmentMatcher });

const authLink = token => setContext((_, { headers }) => {
  return {
    headers: _extends({}, headers, {
      authorization: token ? `Bearer ${token}` : ""
    })
  };
});

const errorLink = ({ onUserError, onNetworkError }) => onError(error => {
  if (error.networkError && onNetworkError) {
    onNetworkError(error.networkError);
  } else if (error.graphQLErrors && onUserError) {
    error.graphQLErrors.forEach(onUserError);
  }
});

module.exports = {
  client: (uri, opts = {}) => {
    const client = new ApolloClient({
      link: errorLink(opts).concat(authLink(opts.token).concat(new HttpLink({ uri, fetch }))),
      cache
    });
    return {
      instances: require("./instances")(client),
      apps: require("./apps")(client),
      buckets: require("./buckets")(client),
      datastores: require("./datastores")(client),
      resources: require("./resources")(client),
      appstoreapps: require("./appstoreapps")(client),
      currentUser: require("./current-user")(client),
      reset: () => client.resetStore()
    };
  },
  subscriptions: (uri, token, options = { reconnect: true }, webSocketImpl) => {
    options.connectionParams = { token };
    const wsLink = new WebSocketLink({ uri, options, webSocketImpl });
    const wsclient = new ApolloClient({
      link: wsLink,
      cache
    });
    return {
      instances: require("./subscriptions/instances")(wsclient),
      apps: require("./subscriptions/apps")(wsclient),
      buckets: require("./subscriptions/buckets")(wsclient),
      resources: require("./subscriptions/resources")(wsclient),
      reset: () => {
        wsclient.resetStore();
        wsLink.subscriptionClient.reconnect = false;
        wsLink.subscriptionClient.client.close();
      }
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJBcG9sbG9DbGllbnQiLCJIdHRwTGluayIsInNldENvbnRleHQiLCJXZWJTb2NrZXRMaW5rIiwib25FcnJvciIsIkluTWVtb3J5Q2FjaGUiLCJJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyIiwiaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSIsImZyYWdtZW50TWF0Y2hlciIsImNhY2hlIiwiYXV0aExpbmsiLCJ0b2tlbiIsIl8iLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImVycm9yTGluayIsIm9uVXNlckVycm9yIiwib25OZXR3b3JrRXJyb3IiLCJlcnJvciIsIm5ldHdvcmtFcnJvciIsImdyYXBoUUxFcnJvcnMiLCJmb3JFYWNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsaWVudCIsInVyaSIsIm9wdHMiLCJsaW5rIiwiY29uY2F0IiwiaW5zdGFuY2VzIiwiYXBwcyIsImJ1Y2tldHMiLCJkYXRhc3RvcmVzIiwicmVzb3VyY2VzIiwiYXBwc3RvcmVhcHBzIiwiY3VycmVudFVzZXIiLCJyZXNldCIsInJlc2V0U3RvcmUiLCJzdWJzY3JpcHRpb25zIiwib3B0aW9ucyIsInJlY29ubmVjdCIsIndlYlNvY2tldEltcGwiLCJjb25uZWN0aW9uUGFyYW1zIiwid3NMaW5rIiwid3NjbGllbnQiLCJzdWJzY3JpcHRpb25DbGllbnQiLCJjbG9zZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxRQUFRQyxRQUFRLFlBQVIsQ0FBZDtBQUNBLE1BQU0sRUFBRUMsWUFBRixLQUFtQkQsUUFBUSxlQUFSLENBQXpCO0FBQ0EsTUFBTSxFQUFFRSxRQUFGLEtBQWVGLFFBQVEsa0JBQVIsQ0FBckI7QUFDQSxNQUFNLEVBQUVHLFVBQUYsS0FBaUJILFFBQVEscUJBQVIsQ0FBdkI7QUFDQSxNQUFNLEVBQUVJLGFBQUYsS0FBb0JKLFFBQVEsZ0JBQVIsQ0FBMUI7QUFDQSxNQUFNLEVB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TTtBQUNYUSxpQkFBU1AsVUFBVDtBQUNBTSxlQUFPRSxrQkFBUCxDQUEwQkwsU0FBMUIsR0FBc0MsS0FBdEM7QUFDQUcsZUFBT0Usa0JBQVAsQ0FBMEJyQixNQUExQixDQUFpQ3NCLEtBQWpDO0FBQ0Q7QUFUSSxLQUFQO0FBV0Q7QUFuQ2MsQ0FBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmZXRjaCA9IHJlcXVpcmUoXCJub2RlLWZldGNoXCIpO1xuY29uc3QgeyBBcG9sbG9DbGllbnQgfSA9IHJlcXVpcmUoXCJhcG9sbG8tY2xpZW50XCIpO1xuY29uc3QgeyBIdHRwTGluayB9ID0gcmVxdWlyZShcImFwb2xsby1saW5rLWh0dHBcIik7XG5jb25zdCB7IHNldENvbnRleHQgfSA9IHJlcXVpcmUoJ2Fwb2xsby1saW5rLWNvbnRleHQnKTtcbmNvbnN0IHsgV2ViU29ja2V0TGluayB9ID0gcmVxdWlyZShcImFwb2xsby1saW5rLXdzXCIpO1xuY29uc3QgeyBvbkVycm9yIH0gPSByZXF1aXJlKFwiYXBvbGxvLWxpbmstZXJyb3JcIik7XG5jb25zdCB7XG4gIEluTWVtb3J5Q2FjaGUsXG4gIEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXJcbn0gPSByZXF1aXJlKFwiYXBvbGxvLWNhY2hlLWlubWVtb3J5XCIpO1xuY29uc3QgaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSA9IHJlcXVpcmUoXCIuL2ZyYWdtZW50VHlwZXMuanNvblwiKTtcblxuLy8gUmVmZXIgdG8gaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hZHZhbmNlZC9mcmFnbWVudHMuaHRtbCNmcmFnbWVudC1tYXRjaGVyXG4vLyBvbiBob3cgdG8gb2J0YWluIHRoZSBmcmFnbWVudFR5cGVzIGRhdGEgXG5jb25zdCBmcmFnbWVudE1hdGNoZXIgPSBuZXcgSW50cm9zcGVjdGlvbkZyYWdtZW50TWF0Y2hlcih7XG4gIGludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGFcbn0pO1xuY29uc3QgY2FjaGUgPSBuZXcgSW5NZW1vcnlDYWNoZSh7IGZyYWdtZW50TWF0Y2hlciB9KTtcblxuY29uc3QgYXV0aExpbmsgPSB0b2tlbiA9PiBzZXRDb250ZXh0KChfLCB7IGhlYWRlcnMgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIC4uLmhlYWRlcnMsXG4gICAgICBhdXRob3JpemF0aW9uOiB0b2tlbiA/IGBCZWFyZXIgJHt0b2tlbn1gIDogXCJcIlxuICAgIH1cbiAgfTtcbn0pO1xuXG5jb25zdCBlcnJvckxpbmsgPSAoe29uVXNlckVycm9yLCBvbk5ldHdvcmtFcnJvcn0pID0+IG9uRXJyb3IoZXJyb3IgPT4ge1xuIGlmKGVycm9yLm5ldHdvcmtFcnJvciAmJiBvbk5ldHdvcmtFcnJvcil7XG4gICBvbk5ldHdvcmtFcnJvcihlcnJvci5uZXR3b3JrRXJyb3IpO1xuIH0gZWxzZSBpZihlcnJvci5ncmFwaFFMRXJyb3JzICYmIG9uVXNlckVycm9yKSB7XG4gICBlcnJvci5ncmFwaFFMRXJyb3JzLmZvckVhY2gob25Vc2VyRXJyb3IpO1xuIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xpZW50OiAodXJpLCBvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgQXBvbGxvQ2xpZW50KHtcbiAgICAgIGxpbms6IGVycm9yTGluayhvcHRzKS5jb25jYXQoYXV0aExpbmsob3B0cy50b2tlbikuY29uY2F0KG5ldyBIdHRwTGluayh7IHVyaSwgZmV0Y2ggfSkpKSxcbiAgICAgIGNhY2hlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlczogcmVxdWlyZShcIi4vaW5zdGFuY2VzXCIpKGNsaWVudCksXG4gICAgICBhcHBzOiByZXF1aXJlKFwiLi9hcHBzXCIpKGNsaWVudCksXG4gICAgICBidWNrZXRzOiByZXF1aXJlKFwiLi9idWNrZXRzXCIpKGNsaWVudCksXG4gICAgICBkYXRhc3RvcmVzOiByZXF1aXJlKFwiLi9kYXRhc3RvcmVzXCIpKGNsaWVudCksXG4gICAgICByZXNvdXJjZXM6IHJlcXVpcmUoXCIuL3Jlc291cmNlc1wiKShjbGllbnQpLFxuICAgICAgYXBwc3RvcmVhcHBzOiByZXF1aXJlKFwiLi9hcHBzdG9yZWFwcHNcIikoY2xpZW50KSxcbiAgICAgIGN1cnJlbnRVc2VyOiByZXF1aXJlKFwiLi9jdXJyZW50LXVzZXJcIikoY2xpZW50KSxcbiAgICAgIHJlc2V0OiAoKSA9PiBjbGllbnQucmVzZXRTdG9yZSgpLFxuICAgIH07XG4gIH0sXG4gIHN1YnNjcmlwdGlvbnM6ICh1cmksIHRva2VuLCBvcHRpb25zID0geyByZWNvbm5lY3Q6IHRydWUgfSwgd2ViU29ja2V0SW1wbCkgPT4ge1xuICAgIG9wdGlvbnMuY29ubmVjdGlvblBhcmFtcyA9IHsgdG9rZW4gfVxuICAgIGNvbnN0IHdzTGluayA9IG5ldyBXZWJTb2NrZXRMaW5rKHsgdXJpLCBvcHRpb25zLCB3ZWJTb2NrZXRJbXBsIH0pO1xuICAgIGNvbnN0IHdzY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgICBsaW5rOiB3c0xpbmssXG4gICAgICBjYWNoZSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5zdGFuY2VzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2luc3RhbmNlc1wiKSh3c2NsaWVudCksXG4gICAgICBhcHBzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2FwcHNcIikod3NjbGllbnQpLFxuICAgICAgYnVja2V0czogcmVxdWlyZShcIi4vc3Vic2NyaXB0aW9ucy9idWNrZXRzXCIpKHdzY2xpZW50KSxcbiAgICAgIHJlc291cmNlczogcmVxdWlyZShcIi4vc3Vic2NyaXB0aW9ucy9yZXNvdXJjZXNcIikod3NjbGllbnQpLFxuICAgICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgICAgd3NjbGllbnQucmVzZXRTdG9yZSgpO1xuICAgICAgICB3c0xpbmsuc3Vic2NyaXB0aW9uQ2xpZW50LnJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICB3c0xpbmsuc3Vic2NyaXB0aW9uQ2xpZW50LmNsaWVudC5jbG9zZSgpXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn07XG4iXX0=