var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const fetch = require("node-fetch");
const { ApolloClient } = require("apollo-client");
const { HttpLink } = require("apollo-link-http");
const { setContext } = require('apollo-link-context');
const { WebSocketLink } = require("apollo-link-ws");
const { onError } = require("apollo-link-error");
const {
  InMemoryCache,
  IntrospectionFragmentMatcher
} = require("apollo-cache-inmemory");
const introspectionQueryResultData = require("./fragmentTypes.json");

// Refer to https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher
// on how to obtain the fragmentTypes data 
const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData
});
const cache = new InMemoryCache({ fragmentMatcher });

const authLink = token => setContext((_, { headers }) => {
  return {
    headers: _extends({}, headers, {
      authorization: token ? `Bearer ${token}` : ""
    })
  };
});

const errorLink = ({ onUserError, onNetworkError }) => onError(error => {
  if (error.networkError && onNetworkError) {
    onNetworkError(error.networkError);
  } else if (error.graphQLErrors && onUserError) {
    error.graphQLErrors.forEach(onUserError);
  }
});

module.exports = {
  client: (uri, opts = {}) => {
    const client = new ApolloClient({
      link: errorLink(opts).concat(authLink(opts.token).concat(new HttpLink({ uri, fetch }))),
      cache
    });
    return {
      instances: require("./instances")(client),
      apps: require("./apps")(client),
      buckets: require("./buckets")(client),
      datastores: require("./datastores")(client),
      resources: require("./resources")(client),
      appstoreapps: require("./appstoreapps")(client),
      currentUser: require("./current-user")(client),
      reset: () => client.resetStore()
    };
  },
  subscriptions: (uri, token, options = { reconnect: true }, webSocketImpl) => {
    options.connectionParams = { token };
    const wsclient = new ApolloClient({
      link: new WebSocketLink({ uri, options, webSocketImpl }),
      cache
    });
    return {
      instances: require("./subscriptions/instances")(wsclient),
      apps: require("./subscriptions/apps")(wsclient),
      buckets: require("./subscriptions/buckets")(wsclient),
      resources: require("./subscriptions/resources")(wsclient),
      reset: () => wsclient.resetStore()
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJBcG9sbG9DbGllbnQiLCJIdHRwTGluayIsInNldENvbnRleHQiLCJXZWJTb2NrZXRMaW5rIiwib25FcnJvciIsIkluTWVtb3J5Q2FjaGUiLCJJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyIiwiaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSIsImZyYWdtZW50TWF0Y2hlciIsImNhY2hlIiwiYXV0aExpbmsiLCJ0b2tlbiIsIl8iLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImVycm9yTGluayIsIm9uVXNlckVycm9yIiwib25OZXR3b3JrRXJyb3IiLCJlcnJvciIsIm5ldHdvcmtFcnJvciIsImdyYXBoUUxFcnJvcnMiLCJmb3JFYWNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsaWVudCIsInVyaSIsIm9wdHMiLCJsaW5rIiwiY29uY2F0IiwiaW5zdGFuY2VzIiwiYXBwcyIsImJ1Y2tldHMiLCJkYXRhc3RvcmVzIiwicmVzb3VyY2VzIiwiYXBwc3RvcmVhcHBzIiwiY3VycmVudFVzZXIiLCJyZXNldCIsInJlc2V0U3RvcmUiLCJzdWJzY3JpcHRpb25zIiwib3B0aW9ucyIsInJlY29ubmVjdCIsIndlYlNvY2tldEltcGwiLCJjb25uZWN0aW9uUGFyYW1zIiwid3NjbGllbnQiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsUUFBUUMsUUFBUSxZQUFSLENBQWQ7QUFDQSxNQUFNLEVBQUVDLFlBQUYsS0FBbUJELFFBQVEsZUFBUixDQUF6QjtBQUNBLE1BQU0sRUFBRUUsUUFBRixLQUFlRixRQUFRLGtCQUFSLENBQXJCO0FBQ0EsTUFBTSxFQUFFRyxVQUFGLEtBQWlCSCxRQUFRLHFCQUFSLENBQXZCO0FBQ0EsTUFBTSxFQUFFSSxhQUFGLEtBQW9CSixRQUFRLGdCQUFSLENBQTFCO0FBQ0EsTUFBTSxFQUFFSyxPQUFGLEtBQWNMLFFBQVEsbUJBQVIsQ0FBcEI7QUFDQSxN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c291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmV0Y2ggPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcbmNvbnN0IHsgQXBvbGxvQ2xpZW50IH0gPSByZXF1aXJlKFwiYXBvbGxvLWNsaWVudFwiKTtcbmNvbnN0IHsgSHR0cExpbmsgfSA9IHJlcXVpcmUoXCJhcG9sbG8tbGluay1odHRwXCIpO1xuY29uc3QgeyBzZXRDb250ZXh0IH0gPSByZXF1aXJlKCdhcG9sbG8tbGluay1jb250ZXh0Jyk7XG5jb25zdCB7IFdlYlNvY2tldExpbmsgfSA9IHJlcXVpcmUoXCJhcG9sbG8tbGluay13c1wiKTtcbmNvbnN0IHsgb25FcnJvciB9ID0gcmVxdWlyZShcImFwb2xsby1saW5rLWVycm9yXCIpO1xuY29uc3Qge1xuICBJbk1lbW9yeUNhY2hlLFxuICBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyXG59ID0gcmVxdWlyZShcImFwb2xsby1jYWNoZS1pbm1lbW9yeVwiKTtcbmNvbnN0IGludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGEgPSByZXF1aXJlKFwiLi9mcmFnbWVudFR5cGVzLmpzb25cIik7XG5cbi8vIFJlZmVyIHRvIGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvcmVhY3QvYWR2YW5jZWQvZnJhZ21lbnRzLmh0bWwjZnJhZ21lbnQtbWF0Y2hlclxuLy8gb24gaG93IHRvIG9idGFpbiB0aGUgZnJhZ21lbnRUeXBlcyBkYXRhIFxuY29uc3QgZnJhZ21lbnRNYXRjaGVyID0gbmV3IEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXIoe1xuICBpbnRyb3NwZWN0aW9uUXVlcnlSZXN1bHREYXRhXG59KTtcbmNvbnN0IGNhY2hlID0gbmV3IEluTWVtb3J5Q2FjaGUoeyBmcmFnbWVudE1hdGNoZXIgfSk7XG5cbmNvbnN0IGF1dGhMaW5rID0gdG9rZW4gPT4gc2V0Q29udGV4dCgoXywgeyBoZWFkZXJzIH0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAuLi5oZWFkZXJzLFxuICAgICAgYXV0aG9yaXphdGlvbjogdG9rZW4gPyBgQmVhcmVyICR7dG9rZW59YCA6IFwiXCJcbiAgICB9XG4gIH07XG59KTtcblxuY29uc3QgZXJyb3JMaW5rID0gKHtvblVzZXJFcnJvciwgb25OZXR3b3JrRXJyb3J9KSA9PiBvbkVycm9yKGVycm9yID0+IHtcbiBpZihlcnJvci5uZXR3b3JrRXJyb3IgJiYgb25OZXR3b3JrRXJyb3Ipe1xuICAgb25OZXR3b3JrRXJyb3IoZXJyb3IubmV0d29ya0Vycm9yKTtcbiB9IGVsc2UgaWYoZXJyb3IuZ3JhcGhRTEVycm9ycyAmJiBvblVzZXJFcnJvcikge1xuICAgZXJyb3IuZ3JhcGhRTEVycm9ycy5mb3JFYWNoKG9uVXNlckVycm9yKTtcbiB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsaWVudDogKHVyaSwgb3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgICBsaW5rOiBlcnJvckxpbmsob3B0cykuY29uY2F0KGF1dGhMaW5rKG9wdHMudG9rZW4pLmNvbmNhdChuZXcgSHR0cExpbmsoeyB1cmksIGZldGNoIH0pKSksXG4gICAgICBjYWNoZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbnN0YW5jZXM6IHJlcXVpcmUoXCIuL2luc3RhbmNlc1wiKShjbGllbnQpLFxuICAgICAgYXBwczogcmVxdWlyZShcIi4vYXBwc1wiKShjbGllbnQpLFxuICAgICAgYnVja2V0czogcmVxdWlyZShcIi4vYnVja2V0c1wiKShjbGllbnQpLFxuICAgICAgZGF0YXN0b3JlczogcmVxdWlyZShcIi4vZGF0YXN0b3Jlc1wiKShjbGllbnQpLFxuICAgICAgcmVzb3VyY2VzOiByZXF1aXJlKFwiLi9yZXNvdXJjZXNcIikoY2xpZW50KSxcbiAgICAgIGFwcHN0b3JlYXBwczogcmVxdWlyZShcIi4vYXBwc3RvcmVhcHBzXCIpKGNsaWVudCksXG4gICAgICBjdXJyZW50VXNlcjogcmVxdWlyZShcIi4vY3VycmVudC11c2VyXCIpKGNsaWVudCksXG4gICAgICByZXNldDogKCkgPT4gY2xpZW50LnJlc2V0U3RvcmUoKSxcbiAgICB9O1xuICB9LFxuICBzdWJzY3JpcHRpb25zOiAodXJpLCB0b2tlbiwgb3B0aW9ucyA9IHsgcmVjb25uZWN0OiB0cnVlIH0sIHdlYlNvY2tldEltcGwpID0+IHtcbiAgICBvcHRpb25zLmNvbm5lY3Rpb25QYXJhbXMgPSB7IHRva2VuIH1cbiAgICBjb25zdCB3c2NsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoe1xuICAgICAgbGluazogbmV3IFdlYlNvY2tldExpbmsoeyB1cmksIG9wdGlvbnMsIHdlYlNvY2tldEltcGwgfSksXG4gICAgICBjYWNoZSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5zdGFuY2VzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2luc3RhbmNlc1wiKSh3c2NsaWVudCksXG4gICAgICBhcHBzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2FwcHNcIikod3NjbGllbnQpLFxuICAgICAgYnVja2V0czogcmVxdWlyZShcIi4vc3Vic2NyaXB0aW9ucy9idWNrZXRzXCIpKHdzY2xpZW50KSxcbiAgICAgIHJlc291cmNlczogcmVxdWlyZShcIi4vc3Vic2NyaXB0aW9ucy9yZXNvdXJjZXNcIikod3NjbGllbnQpLFxuICAgICAgcmVzZXQ6ICgpID0+IHdzY2xpZW50LnJlc2V0U3RvcmUoKSxcbiAgICB9O1xuICB9XG59O1xuIl19