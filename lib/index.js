var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const fetch = require("node-fetch");
const { ApolloClient } = require("apollo-client");
const { HttpLink } = require("apollo-link-http");
const { setContext } = require('apollo-link-context');
const { WebSocketLink } = require("apollo-link-ws");
const { onError } = require("apollo-link-error");
const {
  InMemoryCache,
  IntrospectionFragmentMatcher
} = require("apollo-cache-inmemory");
const introspectionQueryResultData = require("./fragmentTypes.json");

// Refer to https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher
// on how to obtain the fragmentTypes data 
const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData
});
const cache = new InMemoryCache({ fragmentMatcher });

const authLink = token => setContext((_, { headers }) => {
  return {
    headers: _extends({}, headers, {
      authorization: token ? `Bearer ${token}` : ""
    })
  };
});

const errorLink = ({ onUserError, onNetworkError }) => onError(error => {
  if (error.networkError && onNetworkError) {
    onNetworkError(error.networkError);
  } else if (error.graphQLErrors && onUserError) {
    error.graphQLErrors.forEach(onUserError);
  }
});

module.exports = {
  client: (uri, opts = {}) => {
    const client = new ApolloClient({
      link: errorLink(opts).concat(authLink(opts.token).concat(new HttpLink({ uri, fetch }))),
      cache
    });
    return {
      instances: require("./instances")(client),
      apps: require("./apps")(client),
      buckets: require("./buckets")(client),
      datastores: require("./datastores")(client),
      resources: require("./resources")(client),
      appstoreapps: require("./appstoreapps")(client),
      currentUser: require("./current-user")(client)
    };
  },
  subscriptions: (uri, token, options = { reconnect: true }, webSocketImpl) => {
    options.connectionParams = { token };
    const wsclient = new ApolloClient({
      link: new WebSocketLink({ uri, options, webSocketImpl }),
      cache
    });
    return {
      instances: require("./subscriptions/instances")(wsclient),
      apps: require("./subscriptions/apps")(wsclient),
      buckets: require("./subscriptions/buckets")(wsclient),
      resources: require("./subscriptions/resources")(wsclient)
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJBcG9sbG9DbGllbnQiLCJIdHRwTGluayIsInNldENvbnRleHQiLCJXZWJTb2NrZXRMaW5rIiwib25FcnJvciIsIkluTWVtb3J5Q2FjaGUiLCJJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyIiwiaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSIsImZyYWdtZW50TWF0Y2hlciIsImNhY2hlIiwiYXV0aExpbmsiLCJ0b2tlbiIsIl8iLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImVycm9yTGluayIsIm9uVXNlckVycm9yIiwib25OZXR3b3JrRXJyb3IiLCJlcnJvciIsIm5ldHdvcmtFcnJvciIsImdyYXBoUUxFcnJvcnMiLCJmb3JFYWNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsaWVudCIsInVyaSIsIm9wdHMiLCJsaW5rIiwiY29uY2F0IiwiaW5zdGFuY2VzIiwiYXBwcyIsImJ1Y2tldHMiLCJkYXRhc3RvcmVzIiwicmVzb3VyY2VzIiwiYXBwc3RvcmVhcHBzIiwiY3VycmVudFVzZXIiLCJzdWJzY3JpcHRpb25zIiwib3B0aW9ucyIsInJlY29ubmVjdCIsIndlYlNvY2tldEltcGwiLCJjb25uZWN0aW9uUGFyYW1zIiwid3NjbGllbnQiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsUUFBUUMsUUFBUSxZQUFSLENBQWQ7QUFDQSxNQUFNLEVBQUVDLFlBQUYsS0FBbUJELFFBQVEsZUFBUixDQUF6QjtBQUNBLE1BQU0sRUFBRUUsUUFBRixLQUFlRixRQUFRLGtCQUFSLENBQXJCO0FBQ0EsTUFBTSxFQUFFRyxVQUFGLEtBQWlCSCxRQUFRLHFCQUFSLENBQXZCO0FBQ0EsTUFBTSxFQUFFSSxhQUFGLEtBQW9CSixRQUFRLGdCQUFSLENBQTFCO0FBQ0EsTUFBTSxFQUFFSyxPQUFGLEtBQWNMLFFBQVEsbUJBQVIsQ0FBcEI7QUFDQSxNQUFNO0FBQ0pNLGVBREk7QUFFSkM7QUFGSSxJQUdGUCxRQUFRLHVCQUFSLENBSEo7QUFJQSxNQUFNUSwrQkFBK0JSLFFBQVEsc0JBQVIsQ0FBckM7O0FBRUE7QUFDQTtBQUNBLE1BQU1TLGtCQUFrQixJQUFJRiw0QkFBSixDQUFpQztBQUN2REM7QUFEdUQsQ0FBakMsQ0FBeEI7QUFHQSxNQUFNRSxRQUFRLElBQUlKLGFBQUosQ0FBa0IsRUFBRUcsZUFBRixFQUFsQixDQUFkOztBQUVBLE1BQU1FLFdBQVdDLFNBQVNULFdBQVcsQ0FBQ1UsQ0FBRCxFQUFJLEVBQUVDLE9BQUYsRUFBSixLQUFvQjtBQUN2RCxTQUFPO0FBQ0xBLDBCQUNLQSxPQURMO0FBRUVDLHFCQUFlSCxRQUFTLFVBQVNBLEtBQU0sRUFBeEIsR0FBNEI7QUFGN0M7QUFESyxHQUFQO0FBTUQsQ0FQeUIsQ0FBMUI7O0FBU0EsTUFBTUksWUFBWSxDQUFDLEVBQUNDLFdBQUQsRUFBY0MsY0FBZCxFQUFELEtBQW1DYixRQUFRYyxTQUFTO0FBQ3JFLE1BQUdBLE1BQU1DLFlBQU4sSUFBc0JGLGNBQXpCLEVBQXdDO0FBQ3RDQSxtQkFBZUMsTUFBTUMsWUFBckI7QUFDRCxHQUZELE1BRU8sSUFBR0QsTUFBTUUsYUFBTixJQUF1QkosV0FBMUIsRUFBdUM7QUFDNUNFLFVBQU1FLGFBQU4sQ0FBb0JDLE9BQXBCLENBQTRCTCxXQUE1QjtBQUNEO0FBQ0QsQ0FOb0QsQ0FBckQ7O0FBUUFNLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsVUFBUSxDQUFDQyxHQUFELEVBQU1DLE9BQU8sRUFBYixLQUFvQjtBQUMxQixVQUFNRixTQUFTLElBQUl4QixZQUFKLENBQWlCO0FBQzlCMkIsWUFBTVosVUFBVVcsSUFBVixFQUFnQkUsTUFBaEIsQ0FBdUJsQixTQUFTZ0IsS0FBS2YsS0FBZCxFQUFxQmlCLE1BQXJCLENBQTRCLElBQUkzQixRQUFKLENBQWEsRUFBRXdCLEdBQUYsRUFBTzNCLEtBQVAsRUFBYixDQUE1QixDQUF2QixDQUR3QjtBQUU5Qlc7QUFGOEIsS0FBakIsQ0FBZjtBQUlBLFdBQU87QUFDTG9CLGlCQUFXOUIsUUFBUSxhQUFSLEVBQXVCeUIsTUFBdkIsQ0FETjtBQUVMTSxZQUFNL0IsUUFBUSxRQUFSLEVBQWtCeUIsTUFBbEIsQ0FGRDtBQUdMTyxlQUFTaEMsUUFBUSxXQUFSLEVBQXFCeUIsTUFBckIsQ0FISjtBQUlMUSxrQkFBWWpDLFFBQVEsY0FBUixFQUF3QnlCLE1BQXhCLENBSlA7QUFLTFMsaUJBQVdsQyxRQUFRLGFBQVIsRUFBdUJ5QixNQUF2QixDQUxOO0FBTUxVLG9CQUFjbkMsUUFBUSxnQkFBUixFQUEwQnlCLE1BQTFCLENBTlQ7QUFPTFcsbUJBQWFwQyxRQUFRLGdCQUFSLEVBQTBCeUIsTUFBMUI7QUFQUixLQUFQO0FBU0QsR0FmYztBQWdCZlksaUJBQWUsQ0FBQ1gsR0FBRCxFQUFNZCxLQUFOLEVBQWEwQixVQUFVLEVBQUVDLFdBQVcsSUFBYixFQUF2QixFQUE0Q0MsYUFBNUMsS0FBOEQ7QUFDM0VGLFlBQVFHLGdCQUFSLEdBQTJCLEVBQUU3QixLQUFGLEVBQTNCO0FBQ0EsVUFBTThCLFdBQVcsSUFBSXpDLFlBQUosQ0FBaUI7QUFDaEMyQixZQUFNLElBQUl4QixhQUFKLENBQWtCLEVBQUVzQixHQUFGLEVBQU9ZLE9BQVAsRUFBZ0JFLGFBQWhCLEVBQWxCLENBRDBCO0FBRWhDOUI7QUFGZ0MsS0FBakIsQ0FBakI7QUFJQSxXQUFPO0FBQ0xvQixpQkFBVzlCLFFBQVEsMkJBQVIsRUFBcUMwQyxRQUFyQyxDQUROO0FBRUxYLFlBQU0vQixRQUFRLHNCQUFSLEVBQWdDMEMsUUFBaEMsQ0FGRDtBQUdMVixlQUFTaEMsUUFBUSx5QkFBUixFQUFtQzBDLFFBQW5DLENBSEo7QUFJTFIsaUJBQVdsQyxRQUFRLDJCQUFSLEVBQXFDMEMsUUFBckM7QUFKTixLQUFQO0FBTUQ7QUE1QmMsQ0FBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmZXRjaCA9IHJlcXVpcmUoXCJub2RlLWZldGNoXCIpO1xuY29uc3QgeyBBcG9sbG9DbGllbnQgfSA9IHJlcXVpcmUoXCJhcG9sbG8tY2xpZW50XCIpO1xuY29uc3QgeyBIdHRwTGluayB9ID0gcmVxdWlyZShcImFwb2xsby1saW5rLWh0dHBcIik7XG5jb25zdCB7IHNldENvbnRleHQgfSA9IHJlcXVpcmUoJ2Fwb2xsby1saW5rLWNvbnRleHQnKTtcbmNvbnN0IHsgV2ViU29ja2V0TGluayB9ID0gcmVxdWlyZShcImFwb2xsby1saW5rLXdzXCIpO1xuY29uc3QgeyBvbkVycm9yIH0gPSByZXF1aXJlKFwiYXBvbGxvLWxpbmstZXJyb3JcIik7XG5jb25zdCB7XG4gIEluTWVtb3J5Q2FjaGUsXG4gIEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXJcbn0gPSByZXF1aXJlKFwiYXBvbGxvLWNhY2hlLWlubWVtb3J5XCIpO1xuY29uc3QgaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSA9IHJlcXVpcmUoXCIuL2ZyYWdtZW50VHlwZXMuanNvblwiKTtcblxuLy8gUmVmZXIgdG8gaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hZHZhbmNlZC9mcmFnbWVudHMuaHRtbCNmcmFnbWVudC1tYXRjaGVyXG4vLyBvbiBob3cgdG8gb2J0YWluIHRoZSBmcmFnbWVudFR5cGVzIGRhdGEgXG5jb25zdCBmcmFnbWVudE1hdGNoZXIgPSBuZXcgSW50cm9zcGVjdGlvbkZyYWdtZW50TWF0Y2hlcih7XG4gIGludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGFcbn0pO1xuY29uc3QgY2FjaGUgPSBuZXcgSW5NZW1vcnlDYWNoZSh7IGZyYWdtZW50TWF0Y2hlciB9KTtcblxuY29uc3QgYXV0aExpbmsgPSB0b2tlbiA9PiBzZXRDb250ZXh0KChfLCB7IGhlYWRlcnMgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIC4uLmhlYWRlcnMsXG4gICAgICBhdXRob3JpemF0aW9uOiB0b2tlbiA/IGBCZWFyZXIgJHt0b2tlbn1gIDogXCJcIlxuICAgIH1cbiAgfTtcbn0pO1xuXG5jb25zdCBlcnJvckxpbmsgPSAoe29uVXNlckVycm9yLCBvbk5ldHdvcmtFcnJvcn0pID0+IG9uRXJyb3IoZXJyb3IgPT4ge1xuIGlmKGVycm9yLm5ldHdvcmtFcnJvciAmJiBvbk5ldHdvcmtFcnJvcil7XG4gICBvbk5ldHdvcmtFcnJvcihlcnJvci5uZXR3b3JrRXJyb3IpO1xuIH0gZWxzZSBpZihlcnJvci5ncmFwaFFMRXJyb3JzICYmIG9uVXNlckVycm9yKSB7XG4gICBlcnJvci5ncmFwaFFMRXJyb3JzLmZvckVhY2gob25Vc2VyRXJyb3IpO1xuIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xpZW50OiAodXJpLCBvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgQXBvbGxvQ2xpZW50KHtcbiAgICAgIGxpbms6IGVycm9yTGluayhvcHRzKS5jb25jYXQoYXV0aExpbmsob3B0cy50b2tlbikuY29uY2F0KG5ldyBIdHRwTGluayh7IHVyaSwgZmV0Y2ggfSkpKSxcbiAgICAgIGNhY2hlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlczogcmVxdWlyZShcIi4vaW5zdGFuY2VzXCIpKGNsaWVudCksXG4gICAgICBhcHBzOiByZXF1aXJlKFwiLi9hcHBzXCIpKGNsaWVudCksXG4gICAgICBidWNrZXRzOiByZXF1aXJlKFwiLi9idWNrZXRzXCIpKGNsaWVudCksXG4gICAgICBkYXRhc3RvcmVzOiByZXF1aXJlKFwiLi9kYXRhc3RvcmVzXCIpKGNsaWVudCksXG4gICAgICByZXNvdXJjZXM6IHJlcXVpcmUoXCIuL3Jlc291cmNlc1wiKShjbGllbnQpLFxuICAgICAgYXBwc3RvcmVhcHBzOiByZXF1aXJlKFwiLi9hcHBzdG9yZWFwcHNcIikoY2xpZW50KSxcbiAgICAgIGN1cnJlbnRVc2VyOiByZXF1aXJlKFwiLi9jdXJyZW50LXVzZXJcIikoY2xpZW50KVxuICAgIH07XG4gIH0sXG4gIHN1YnNjcmlwdGlvbnM6ICh1cmksIHRva2VuLCBvcHRpb25zID0geyByZWNvbm5lY3Q6IHRydWUgfSwgd2ViU29ja2V0SW1wbCkgPT4ge1xuICAgIG9wdGlvbnMuY29ubmVjdGlvblBhcmFtcyA9IHsgdG9rZW4gfVxuICAgIGNvbnN0IHdzY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgICBsaW5rOiBuZXcgV2ViU29ja2V0TGluayh7IHVyaSwgb3B0aW9ucywgd2ViU29ja2V0SW1wbCB9KSxcbiAgICAgIGNhY2hlLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbnN0YW5jZXM6IHJlcXVpcmUoXCIuL3N1YnNjcmlwdGlvbnMvaW5zdGFuY2VzXCIpKHdzY2xpZW50KSxcbiAgICAgIGFwcHM6IHJlcXVpcmUoXCIuL3N1YnNjcmlwdGlvbnMvYXBwc1wiKSh3c2NsaWVudCksXG4gICAgICBidWNrZXRzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL2J1Y2tldHNcIikod3NjbGllbnQpLFxuICAgICAgcmVzb3VyY2VzOiByZXF1aXJlKFwiLi9zdWJzY3JpcHRpb25zL3Jlc291cmNlc1wiKSh3c2NsaWVudClcbiAgICB9O1xuICB9XG59O1xuIl19