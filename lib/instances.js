const { instancesQuery, serviceLogsQuery } = require("./queries");
const { startInstance, stopInstance } = require("./mutations");

module.exports = apolloClient => ({
  list: () => new Promise((resolve, reject) => {
    apolloClient.query({ query: instancesQuery }).then(res => resolve(res.data.instances)).catch(reject);
  }),
  serviceLogs: (instanceName, serviceName) => new Promise((resolve, reject) => {
    const variables = { instanceName, serviceName };
    apolloClient.query({ query: serviceLogsQuery, variables }).then(res => resolve(res.data.instances[0].services[0].logs)).catch(reject);
  }),
  start: (name, appName, appVersion, parameters = {}, options = {}) => new Promise((resolve, reject) => {
    const variables = { name, appName, appVersion, parameters, options };
    apolloClient.mutate({ mutation: startInstance, variables }).then(res => resolve(res.data.startInstance)).catch(reject);
  }),
  stop: name => new Promise((resolve, reject) => {
    const variables = { name };
    apolloClient.mutate({ mutation: stopInstance, variables }).then(res => resolve(res.data.stopInstance)).catch(reject);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnN0YW5jZXMuanMiXSwibmFtZXMiOlsiaW5zdGFuY2VzUXVlcnkiLCJzZXJ2aWNlTG9nc1F1ZXJ5IiwicmVxdWlyZSIsInN0YXJ0SW5zdGFuY2UiLCJzdG9wSW5zdGFuY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBvbGxvQ2xpZW50IiwibGlzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicXVlcnkiLCJ0aGVuIiwicmVzIiwiZGF0YSIsImluc3RhbmNlcyIsImNhdGNoIiwic2VydmljZUxvZ3MiLCJpbnN0YW5jZU5hbWUiLCJzZXJ2aWNlTmFtZSIsInZhcmlhYmxlcyIsInNlcnZpY2VzIiwibG9ncyIsInN0YXJ0IiwibmFtZSIsImFwcE5hbWUiLCJhcHBWZXJzaW9uIiwicGFyYW1ldGVycyIsIm9wdGlvbnMiLCJtdXRhdGUiLCJtdXRhdGlvbiIsInN0b3AiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsY0FBRixFQUFrQkMsZ0JBQWxCLEtBQXVDQyxRQUFRLFdBQVIsQ0FBN0M7QUFDQSxNQUFNLEVBQUVDLGFBQUYsRUFBaUJDLFlBQWpCLEtBQWtDRixRQUFRLGFBQVIsQ0FBeEM7O0FBRUFHLE9BQU9DLE9BQVAsR0FBaUJDLGlCQUFpQjtBQUNoQ0MsUUFBTSxNQUNKLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDL0JKLGlCQUNHSyxLQURILENBQ1MsRUFBRUEsT0FBT1osY0FBVCxFQURULEVBRUdhLElBRkgsQ0FFUUMsT0FBT0osUUFBUUksSUFBSUMsSUFBSixDQUFTQyxTQUFqQixDQUZmLEVBR0dDLEtBSEgsQ0FHU04sTUFIVDtBQUlELEdBTEQsQ0FGOEI7QUFRaENPLGVBQWEsQ0FBQ0MsWUFBRCxFQUFlQyxXQUFmLEtBQ1gsSUFBSVgsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUMvQixVQUFNVSxZQUFZLEVBQUVGLFlBQUYsRUFBZ0JDLFdBQWhCLEVBQWxCO0FBQ0FiLGlCQUNHSyxLQURILENBQ1MsRUFBRUEsT0FBT1gsZ0JBQVQsRUFBMkJvQixTQUEzQixFQURULEVBRUdSLElBRkgsQ0FFUUMsT0FBT0osUUFBUUksSUFBSUMsSUFBSixDQUFTQyxTQUFULENBQW1CLENBQW5CLEVBQXNCTSxRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsSUFBMUMsQ0FGZixFQUdHTixLQUhILENBR1NOLE1BSFQ7QUFJRCxHQU5ELENBVDhCO0FBZ0JoQ2EsU0FBTyxDQUFDQyxJQUFELEVBQU9DLE9BQVAsRUFBZ0JDLFVBQWhCLEVBQTRCQyxhQUFhLEVBQXpDLEVBQTZDQyxVQUFVLEVBQXZELEtBQ0wsSUFBSXBCLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDL0IsVUFBTVUsWUFBWSxFQUFFSSxJQUFGLEVBQVFDLE9BQVIsRUFBaUJDLFVBQWpCLEVBQTZCQyxVQUE3QixFQUF5Q0MsT0FBekMsRUFBbEI7QUFDQXRCLGlCQUNHdUIsTUFESCxDQUNVLEVBQUVDLFVBQVU1QixhQUFaLEVBQTJCa0IsU0FBM0IsRUFEVixFQUVHUixJQUZILENBRVFDLE9BQU9KLFFBQVFJLElBQUlDLElBQUosQ0FBU1osYUFBakIsQ0FGZixFQUdHYyxLQUhILENBR1NOLE1BSFQ7QUFJRCxHQU5ELENBakI4QjtBQXdCaENxQixRQUFNUCxRQUNKLElBQUloQixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CLFVBQU1VLFlBQVksRUFBRUksSUFBRixFQUFsQjtBQUNBbEIsaUJBQ0d1QixNQURILENBQ1UsRUFBRUMsVUFBVTNCLFlBQVosRUFBMEJpQixTQUExQixFQURWLEVBRUdSLElBRkgsQ0FFUUMsT0FBT0osUUFBUUksSUFBSUMsSUFBSixDQUFTWCxZQUFqQixDQUZmLEVBR0dhLEtBSEgsQ0FHU04sTUFIVDtBQUlELEdBTkQ7QUF6QjhCLENBQWpCLENBQWpCIiwiZmlsZSI6Imluc3RhbmNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaW5zdGFuY2VzUXVlcnksIHNlcnZpY2VMb2dzUXVlcnkgfSA9IHJlcXVpcmUoXCIuL3F1ZXJpZXNcIik7XG5jb25zdCB7IHN0YXJ0SW5zdGFuY2UsIHN0b3BJbnN0YW5jZSB9ID0gcmVxdWlyZShcIi4vbXV0YXRpb25zXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwb2xsb0NsaWVudCA9PiAoe1xuICBsaXN0OiAoKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGFwb2xsb0NsaWVudFxuICAgICAgICAucXVlcnkoeyBxdWVyeTogaW5zdGFuY2VzUXVlcnkgfSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzLmRhdGEuaW5zdGFuY2VzKSlcbiAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSksXG4gIHNlcnZpY2VMb2dzOiAoaW5zdGFuY2VOYW1lLCBzZXJ2aWNlTmFtZSkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IGluc3RhbmNlTmFtZSwgc2VydmljZU5hbWUgfTtcbiAgICAgIGFwb2xsb0NsaWVudFxuICAgICAgICAucXVlcnkoeyBxdWVyeTogc2VydmljZUxvZ3NRdWVyeSwgdmFyaWFibGVzIH0pXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXNvbHZlKHJlcy5kYXRhLmluc3RhbmNlc1swXS5zZXJ2aWNlc1swXS5sb2dzKSlcbiAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSksXG4gIHN0YXJ0OiAobmFtZSwgYXBwTmFtZSwgYXBwVmVyc2lvbiwgcGFyYW1ldGVycyA9IHt9LCBvcHRpb25zID0ge30pID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdmFyaWFibGVzID0geyBuYW1lLCBhcHBOYW1lLCBhcHBWZXJzaW9uLCBwYXJhbWV0ZXJzLCBvcHRpb25zIH07XG4gICAgICBhcG9sbG9DbGllbnRcbiAgICAgICAgLm11dGF0ZSh7IG11dGF0aW9uOiBzdGFydEluc3RhbmNlLCB2YXJpYWJsZXMgfSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzLmRhdGEuc3RhcnRJbnN0YW5jZSkpXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pLFxuICBzdG9wOiBuYW1lID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdmFyaWFibGVzID0geyBuYW1lIH07XG4gICAgICBhcG9sbG9DbGllbnRcbiAgICAgICAgLm11dGF0ZSh7IG11dGF0aW9uOiBzdG9wSW5zdGFuY2UsIHZhcmlhYmxlcyB9KVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMuZGF0YS5zdG9wSW5zdGFuY2UpKVxuICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9KVxufSk7XG4iXX0=