const { bucketsQuery } = require('./queries');
const { deleteBucket, copyBucket } = require('./mutations');

module.exports = apolloClient => ({
    list: () => new Promise((resolve, reject) => {
        apolloClient.query({ query: bucketsQuery }).then(res => resolve(res.data.buckets)).catch(reject);
    }),
    remove: name => new Promise((resolve, reject) => {
        const variables = { name };
        apolloClient.mutate({ mutation: deleteBucket, variables }).then(res => resolve(res.data.deleteBucket)).catch(reject);
    }),
    copy: (sourceName, destinationName) => new Promise((resolve, reject) => {
        const variables = { sourceName, destinationName };
        apolloClient.mutate({ mutation: copyBucket, variables }).then(res => resolve(res.data.copyBucket)).catch(reject);
    })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idWNrZXRzLmpzIl0sIm5hbWVzIjpbImJ1Y2tldHNRdWVyeSIsInJlcXVpcmUiLCJkZWxldGVCdWNrZXQiLCJjb3B5QnVja2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsImFwb2xsb0NsaWVudCIsImxpc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5IiwidGhlbiIsInJlcyIsImRhdGEiLCJidWNrZXRzIiwiY2F0Y2giLCJyZW1vdmUiLCJuYW1lIiwidmFyaWFibGVzIiwibXV0YXRlIiwibXV0YXRpb24iLCJjb3B5Iiwic291cmNlTmFtZSIsImRlc3RpbmF0aW9uTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxFQUFFQSxZQUFGLEtBQW1CQyxRQUFRLFdBQVIsQ0FBekI7QUFDQSxNQUFNLEVBQUVDLFlBQUYsRUFBZ0JDLFVBQWhCLEtBQThCRixRQUFRLGFBQVIsQ0FBcEM7O0FBRUFHLE9BQU9DLE9BQVAsR0FBaUJDLGlCQUFpQjtBQUM5QkMsVUFBTSxNQUFNLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDekNKLHFCQUFhSyxLQUFiLENBQW1CLEVBQUVBLE9BQU9YLFlBQVQsRUFBbkIsRUFDS1ksSUFETCxDQUNVQyxPQUFPSixRQUFRSSxJQUFJQyxJQUFKLENBQVNDLE9BQWpCLENBRGpCLEVBRUtDLEtBRkwsQ0FFV04sTUFGWDtBQUdILEtBSlcsQ0FEa0I7QUFNOUJPLFlBQVFDLFFBQVEsSUFBSVYsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUM3QyxjQUFNUyxZQUFZLEVBQUVELElBQUYsRUFBbEI7QUFDQVoscUJBQWFjLE1BQWIsQ0FBb0IsRUFBRUMsVUFBVW5CLFlBQVosRUFBMEJpQixTQUExQixFQUFwQixFQUNLUCxJQURMLENBQ1VDLE9BQU9KLFFBQVFJLElBQUlDLElBQUosQ0FBU1osWUFBakIsQ0FEakIsRUFFS2MsS0FGTCxDQUVXTixNQUZYO0FBR0gsS0FMZSxDQU5jO0FBWTlCWSxVQUFNLENBQUNDLFVBQUQsRUFBYUMsZUFBYixLQUFpQyxJQUFJaEIsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwRSxjQUFNUyxZQUFZLEVBQUVJLFVBQUYsRUFBY0MsZUFBZCxFQUFsQjtBQUNBbEIscUJBQWFjLE1BQWIsQ0FBb0IsRUFBRUMsVUFBVWxCLFVBQVosRUFBd0JnQixTQUF4QixFQUFwQixFQUNLUCxJQURMLENBQ1VDLE9BQU9KLFFBQVFJLElBQUlDLElBQUosQ0FBU1gsVUFBakIsQ0FEakIsRUFFS2EsS0FGTCxDQUVXTixNQUZYO0FBR0gsS0FMc0M7QUFaVCxDQUFqQixDQUFqQiIsImZpbGUiOiJidWNrZXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBidWNrZXRzUXVlcnkgfSA9IHJlcXVpcmUoJy4vcXVlcmllcycpXG5jb25zdCB7IGRlbGV0ZUJ1Y2tldCwgY29weUJ1Y2tldH0gPSByZXF1aXJlKCcuL211dGF0aW9ucycpXG5cbm1vZHVsZS5leHBvcnRzID0gYXBvbGxvQ2xpZW50ID0+ICh7XG4gICAgbGlzdDogKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBhcG9sbG9DbGllbnQucXVlcnkoeyBxdWVyeTogYnVja2V0c1F1ZXJ5IH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMuZGF0YS5idWNrZXRzKSlcbiAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pLFxuICAgIHJlbW92ZTogbmFtZSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IHsgbmFtZSB9XG4gICAgICAgIGFwb2xsb0NsaWVudC5tdXRhdGUoeyBtdXRhdGlvbjogZGVsZXRlQnVja2V0LCB2YXJpYWJsZXMgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiByZXNvbHZlKHJlcy5kYXRhLmRlbGV0ZUJ1Y2tldCkpXG4gICAgICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgIH0pLFxuICAgIGNvcHk6IChzb3VyY2VOYW1lLCBkZXN0aW5hdGlvbk5hbWUpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdmFyaWFibGVzID0geyBzb3VyY2VOYW1lLCBkZXN0aW5hdGlvbk5hbWUgfVxuICAgICAgICBhcG9sbG9DbGllbnQubXV0YXRlKHsgbXV0YXRpb246IGNvcHlCdWNrZXQsIHZhcmlhYmxlcyB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzLmRhdGEuY29weUJ1Y2tldCkpXG4gICAgICAgICAgICAuY2F0Y2gocmVqZWN0KVxuICAgIH0pLFxufSkiXX0=