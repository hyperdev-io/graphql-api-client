const { appsQuery } = require("./queries");
const { removeApp, createOrUpdateApp } = require("./mutations");

module.exports = apolloClient => ({
  list: () => new Promise((resolve, reject) => {
    apolloClient.query({ query: appsQuery }).then(res => resolve(res.data.apps)).catch(reject);
  }),
  createOrUpdate: (name, version, dockerCompose, bigboatCompose) => new Promise((resolve, reject) => {
    const variables = { name, version, dockerCompose, bigboatCompose };
    apolloClient.mutate({ mutation: createOrUpdateApp, variables }).then(res => resolve(res.data.createOrUpdateApp)).catch(reject);
  }),
  remove: (name, version) => new Promise((resolve, reject) => {
    const variables = { name, version };
    apolloClient.mutate({ mutation: removeApp, variables }).then(res => resolve(res.data.removeApp)).catch(reject);
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHBzLmpzIl0sIm5hbWVzIjpbImFwcHNRdWVyeSIsInJlcXVpcmUiLCJyZW1vdmVBcHAiLCJjcmVhdGVPclVwZGF0ZUFwcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcG9sbG9DbGllbnQiLCJsaXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsInRoZW4iLCJyZXMiLCJkYXRhIiwiYXBwcyIsImNhdGNoIiwiY3JlYXRlT3JVcGRhdGUiLCJuYW1lIiwidmVyc2lvbiIsImRvY2tlckNvbXBvc2UiLCJiaWdib2F0Q29tcG9zZSIsInZhcmlhYmxlcyIsIm11dGF0ZSIsIm11dGF0aW9uIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUVBLFNBQUYsS0FBZ0JDLFFBQVEsV0FBUixDQUF0QjtBQUNBLE1BQU0sRUFBRUMsU0FBRixFQUFhQyxpQkFBYixLQUFtQ0YsUUFBUSxhQUFSLENBQXpDOztBQUVBRyxPQUFPQyxPQUFQLEdBQWlCQyxpQkFBaUI7QUFDaENDLFFBQU0sTUFDSixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CSixpQkFDR0ssS0FESCxDQUNTLEVBQUVBLE9BQU9YLFNBQVQsRUFEVCxFQUVHWSxJQUZILENBRVFDLE9BQU9KLFFBQVFJLElBQUlDLElBQUosQ0FBU0MsSUFBakIsQ0FGZixFQUdHQyxLQUhILENBR1NOLE1BSFQ7QUFJRCxHQUxELENBRjhCO0FBUWhDTyxrQkFBZ0IsQ0FBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQWdCQyxhQUFoQixFQUErQkMsY0FBL0IsS0FDZCxJQUFJYixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CLFVBQU1ZLFlBQVksRUFBRUosSUFBRixFQUFRQyxPQUFSLEVBQWlCQyxhQUFqQixFQUFnQ0MsY0FBaEMsRUFBbEI7QUFDQWYsaUJBQ0dpQixNQURILENBQ1UsRUFBRUMsVUFBVXJCLGlCQUFaLEVBQStCbUIsU0FBL0IsRUFEVixFQUVHVixJQUZILENBRVFDLE9BQU9KLFFBQVFJLElBQUlDLElBQUosQ0FBU1gsaUJBQWpCLENBRmYsRUFHR2EsS0FISCxDQUdTTixNQUhUO0FBSUQsR0FORCxDQVQ4QjtBQWdCaENlLFVBQVEsQ0FBQ1AsSUFBRCxFQUFPQyxPQUFQLEtBQ04sSUFBSVgsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUMvQixVQUFNWSxZQUFZLEVBQUVKLElBQUYsRUFBUUMsT0FBUixFQUFsQjtBQUNBYixpQkFDR2lCLE1BREgsQ0FDVSxFQUFFQyxVQUFVdEIsU0FBWixFQUF1Qm9CLFNBQXZCLEVBRFYsRUFFR1YsSUFGSCxDQUVRQyxPQUFPSixRQUFRSSxJQUFJQyxJQUFKLENBQVNaLFNBQWpCLENBRmYsRUFHR2MsS0FISCxDQUdTTixNQUhUO0FBSUQsR0FORDtBQWpCOEIsQ0FBakIsQ0FBakIiLCJmaWxlIjoiYXBwcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgYXBwc1F1ZXJ5IH0gPSByZXF1aXJlKFwiLi9xdWVyaWVzXCIpO1xuY29uc3QgeyByZW1vdmVBcHAsIGNyZWF0ZU9yVXBkYXRlQXBwIH0gPSByZXF1aXJlKFwiLi9tdXRhdGlvbnNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBvbGxvQ2xpZW50ID0+ICh7XG4gIGxpc3Q6ICgpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgYXBvbGxvQ2xpZW50XG4gICAgICAgIC5xdWVyeSh7IHF1ZXJ5OiBhcHBzUXVlcnkgfSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzLmRhdGEuYXBwcykpXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pLFxuICBjcmVhdGVPclVwZGF0ZTogKG5hbWUsIHZlcnNpb24sIGRvY2tlckNvbXBvc2UsIGJpZ2JvYXRDb21wb3NlKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IHsgbmFtZSwgdmVyc2lvbiwgZG9ja2VyQ29tcG9zZSwgYmlnYm9hdENvbXBvc2UgfTtcbiAgICAgIGFwb2xsb0NsaWVudFxuICAgICAgICAubXV0YXRlKHsgbXV0YXRpb246IGNyZWF0ZU9yVXBkYXRlQXBwLCB2YXJpYWJsZXMgfSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzLmRhdGEuY3JlYXRlT3JVcGRhdGVBcHApKVxuICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9KSxcbiAgcmVtb3ZlOiAobmFtZSwgdmVyc2lvbikgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IG5hbWUsIHZlcnNpb24gfTtcbiAgICAgIGFwb2xsb0NsaWVudFxuICAgICAgICAubXV0YXRlKHsgbXV0YXRpb246IHJlbW92ZUFwcCwgdmFyaWFibGVzIH0pXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXNvbHZlKHJlcy5kYXRhLnJlbW92ZUFwcCkpXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pXG59KTtcbiJdfQ==